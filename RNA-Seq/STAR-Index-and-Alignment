#!/bin/bash

# dataRoot -- for data that is part of the github repository
dataRoot="${DNFA_projectRoot}/data"

if [ ! -d ${dataRoot} ]; then
  echo "dataRoot does not exist at ${dataRoot}; did you 'source configuration'?";
  exit 1;
fi

if [ ! -d ${DNFA_generatedDataroot} ]; then
  echo "The generated data directory does not exist at ${DNFA_generatedDataRoot}."
  echo "Please create it before proceeding."
  exit 1;
fi


## Fetch and build STAR source from releases
echo "ensuring that STAR is installed in ${DNFA_starRoot}, and reference genome exists"
pushd ${projectRoot}
echo "make reference_genome"
make reference_genome
popd


################################################################################
## STAR alignment: 2-pass mapping protocol
################################################################################

STAR_BIN=${DNFA_starRoot}/STAR-2.6.0a/bin/Linux_x86_64/STAR
referenceGenomeDir=${DNFA_generatedDataRoot}/referenceGenome
star_index_root=${DNFA_generatedDataRoot}/STARIndex

################################################################################
## looping for sample test1 ##
################################################################################

mkdir -m 755 -p ${DNFA_generatedDataRoot}/Analysis
output_dir=${DNFA_generatedDataRoot}/Analysis/2-pass/test1
read_files_base=${DNFA_raw_data_basedir}/test1

mkdir -m 755 -p ${output_dir}

# iterate over a list of files that differ by only prefixes ("data tags")
data_tags="test1_S2_L001 test1_S2_L002 test1_S2_L003 test1_S2_L004"

if [ ! -f "${output_dir}/test1_S2_L004SJ.out.tab" ]; then
  ## run STAR with sequencing data
  for tag in $data_tags; do
  echo ${tag}
  ${STAR_BIN} \
     --genomeDir $star_index_root \
     --sjdbGTFfile ${referenceGenomeDir}/Homo_sapiens.GRCh38.94.gtf \
     --runThreadN 12 \
     --outFileNamePrefix $output_dir/"$tag" \
     --readFilesIn $read_files_base/"$tag"_R1_001.fastq.gz \
                   $read_files_base/"$tag"_R2_001.fastq.gz \
     --readFilesCommand zcat \
     --twopassMode Basic
  done;
fi


################################################################################
## with looping for sample test2 ##
################################################################################

output_dir=${DNFA_generatedDataRoot}/Analysis/2-pass/test2
read_files_base=${DNFA_raw_data_basedir}/test2
star_index_root=${DNFA_generatedDataRoot}/STARIndex

# iterate over a list of files that differ by only prefixes ("data tags")
data_tags="test2_S3_L001 test2_S3_L002 test2_S3_L003 test2_S3_L004"

mkdir -m 755 -p ${output_dir}

if [ ! -f "${output_dir}/test2_S3_L004SJ.out.tab" ]; then
  ## run STAR with sequencing data
  for tag in $data_tags; do
  echo ${tag}
  ${STAR_BIN} \
     --genomeDir $star_index_root \
     --sjdbGTFfile ${referenceGenomeDir}/Homo_sapiens.GRCh38.94.gtf \
     --runThreadN 12 \
     --outFileNamePrefix $output_dir/"$tag" \
     --readFilesIn $read_files_base/"$tag"_R1_001.fastq.gz \
                   $read_files_base/"$tag"_R2_001.fastq.gz \
     --readFilesCommand zcat \
     --twopassMode Basic
  done;
fi


################################################################################
####   Perform samtool on the STAR-aligned sequence files  ####
################################################################################
## basic samtool command
## samtools sort [-l level] [-m maxMem] [-o out.bam] [-O format] [-n] [-t tag] [-T tmpprefix] [-@ threads] [in.sam|in.bam|in.cram]
## use test1_S2_L001Aligned.out.sam file for sorting
echo "Perform samtool on the STAR-aligned sequence files"
samfile=${DNFA_generatedDataRoot}/Analysis/2-pass/test?/*.sam
Samsort=${DNFA_generatedDataRoot}/Analysis/Samsort
## For the sam files from STAR output folder for samtool sorting,
## use filename=$(basename ${f%%.*}) to extract the base name from
## e.g. "test1_S2_L001Aligned.out.sam" as "test1_S2_L001Aligned"; and
## use it for sort output file name like "test1_S2_L001Aligned.sorted.bam".
mkdir -m 755 -p ${Samsort}
for f in $samfile; do
  filename=$(basename ${f%%.*})
  echo $filename
  if [ ! -f $Samsort/$filename.sorted.bam ]; then
    samtools sort $f -o $Samsort/$filename.sorted.bam
  fi
done


#####################################################
#### Use HTSeq to count the reads from Bam files ####
#####################################################
## install HTSeq on Linux
pip install HTSeq
## Once HTSeq is installed, will use the  Python scripts dexseq_count.py that comes
## with the DEXSeq package (needs to be pre-installed)
python_scripts="~/R/x86_64-redhat-linux-gnu-library/3.4/DEXSeq/python_scripts"
if [ ! -d ${python_scripts}/DEXSeq ]; then
  echo "cannot proceed because DEXSeq is not installed under ${python_scripts}";
  exit;
fi
#pythonScriptsDir = system.file("python_scripts", package="DEXSeq")
#list.files(pythonScriptsDir)

## use position sorted sam file to perform DEXSeq_count!! -p yes: pair-end read
python ${python_scripts}/dexseq_count.py \
  Homo_sapiens.GRCh38.86.DEXSeq.chr.gff \
  test1-1.sort.sam test1-1.sort.text
